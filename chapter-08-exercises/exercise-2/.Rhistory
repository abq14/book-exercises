?gsub
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Tukwila, WA"
hometown
# Assign your name to the variable `my_name`
my_name <- "Abigail"
# Assign your height (in inches) to a variable `my_height`
my_height <- 62
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
print (total_cost)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Tukwila, WA"
hometown
# Assign your name to the variable `my_name`
my_name <- "Abigail"
my_name
# Assign your height (in inches) to a variable `my_height`
my_height <- 62
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
print (total_cost)
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
too_expensive
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000%/%puppy_price
max_puppies
max_puppies <- 5000%/%puppy_price
max_puppies
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
lyric
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
lyric
intro <- intro(lyric, 1, 13)
intro
intro <- substr(lyric, 1, 13)
intro
lyric
?nchar
fruits <- substr(lyric, 15, nchar(lyric))
fruits
?gsub
fruits_e <- gsub("a", "ee", fruits)
fruits_e
fruits_o <- gsub("a", "o", fruits)
fruits_o
lyric_e <- paste(intro, fruits_e)
lyric_e <- paste(intro, fruits_e)
lyric_e
print(paste(intro, fruits_o))
ten <- add_three(7)
ten
add_three <- function(value){
value +3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
ten
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches){
meters <- feet * 0.3048 + inches * 0.0254
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 2)
height_in_meters
setwd("~/18 - 19 Qtr 4 (Summer)/book-exercises/chapter-06-exercises/exercise-2")
install.packages("lintr")
install.packages("styler")
names <- c("Erina", "Abigail")
print(names)
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
n <- +1
# Add 1 to each element in `n` and print the result
n + 1
n <- n + 1
n
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Erina", "Abigail")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
n
m <- seq(10:1)
m
m <- seq(10, 1)
m
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Erina", "Abigail")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
n
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
m
# Subtract `m` FROM `n`. Note the recycling!
print(m - n)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Erina", "Abigail")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
n
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
m
# Subtract `m` FROM `n`. Note the recycling!
print(n - m)
x_range <- seq(-5, 10, 0.1)
x_range
x_range <- seq(-5, 10, 0.1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
x_range <- seq(-5, 10, 0.1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
sin_wave
cos_wave <- cos(x_range)
cos_wave
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Erina", "Abigail")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
n
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
m
# Subtract `m` FROM `n`. Note the recycling!
print(n - m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
sin_wave
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
cos_wave
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals
meals$dinner <- c("pasta", "chicken")
meals
dinner <- meals$dinner
dinner
meals[[5]] <- meals[["lunch"]]
early_meals <- meals[1:2]
early_meals
View(early_meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pasta", "chicken")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
early_meals
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal <- (meal, "pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meal)
better_meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pasta", "chicken")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
early_meals
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
items
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals){
meals <- (meals, "pizza")
meals
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meal)
better_meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("water", "granola bar", "coffee")
my_breakfast
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "peppers", "chicken")
my_lunch
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pasta", "chicken")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
early_meals
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
items
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals){
meals <- c(meals, "pizza")
meals
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meal)
better_meals
?runif
nums <- as.list(runif(10, 1, 100))
nums
lapply(nums, round, 1)
sentence <- to_lower("I like to eat apples and bananas.")
sentence
sentence <- tolower("I like to eat apples and bananas.")
sentence
?strsplit
letters <- strsplit(sentence, "")
letters
letters <- letters_elements[[1]]
letters
letters_unique <- unique(letters)
letters_unique
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
nums <- as.list(runif(10, 1, 100))
nums
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(nums, round, 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("I like to eat apples and bananas.")
sentence
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
letters_elements <- strsplit(sentence, "")
letters_elements
# Extract the vector of letters from the resulting list
letters <- letters_elements[[1]]
letters
# Use the `unique()` function to get a vector of unique letters
letters_unique <- unique(letters)
letters_unique
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
# Print the resulting list of frequencies
count_occuances <- function(letters, all_letters){
length(all_letters[all_letters == letter])
}
e_count <- count_occuances("e", letters)
e_count
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
nums <- as.list(runif(10, 1, 100))
nums
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(nums, round, 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("I like to eat apples and bananas.")
sentence
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
letters_elements <- strsplit(sentence, "")
letters_elements
# Extract the vector of letters from the resulting list
letters <- letters_elements[[1]]
letters
# Use the `unique()` function to get a vector of unique letters
letters_unique <- unique(letters)
letters_unique
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occuances <- function(letters, all_letters){
length(all_letters[all_letters == letters])
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
e_count <- count_occuances("e", letters)
e_count
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
# Print the resulting list of frequencies
# Exercise 2: using `*apply()` functions
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
nums <- as.list(runif(10, 1, 100))
nums
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(nums, round, 1)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("I like to eat apples and bananas.")
sentence
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
letters_elements <- strsplit(sentence, "")
letters_elements
# Extract the vector of letters from the resulting list
letters <- letters_elements[[1]]
letters
# Use the `unique()` function to get a vector of unique letters
letters_unique <- unique(letters)
letters_unique
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occuances <- function(letters, all_letters){
length(all_letters[all_letters == letters])
}
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
e_count <- count_occuances("e", letters)
e_count
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
frequencies <- as.list(sapply(letters_unique, count_occuances, letters))
# Print the resulting list of frequencies
print(frequencies)
setwd("~/18 - 19 Qtr 4 (Summer)/book-exercises/chapter-08-exercises/exercise-2")
library(styler)
library(lintr)
style_file(exercise.R)
style_file("exercise.R")
lint(analysis.R)
lint("analysis.R")
lint("exercise.R")
